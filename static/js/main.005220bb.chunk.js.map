{"version":3,"sources":["Components/About.js","Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","myStyle","color","mode","backgroundColor","className","style","id","type","Navbar","to","title","aboutText","placeholder","marginLeft","onClick","toggleMode","role","cursor","htmlFor","TextForm","useState","text","setText","heading","value","onChange","e","target","rows","disabled","length","console","log","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","execCommand","getSelection","removeAllRanges","split","join","filter","element","Alert","height","alert","word","lower","charAt","slice","capitalized","msg","defaultProps","App","Mode","setMode","setAlert","message","setTimeout","cls","body","classList","remove","add","setInterval","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.005220bb.chunk.js","sourcesContent":["// in CSS we write like- 'background-color' and in JavaScript and React js we write in Cammel case like-'backgroundColor'.\r\n\r\nimport React from 'react';\r\nimport '../index.css';\r\n\r\nexport default function About(props) {\r\n    // const [myStyle, setmyStyle] = useState({\r\n    //     color: 'black',\r\n    //     backgroundColor:'white'\r\n    // })\r\n\r\n    let myStyle = {\r\n        color: props.mode === 'dark' ? 'white' : 'black',\r\n        backgroundColor: props.mode === 'dark' ? '#151313' : 'white',\r\n    }\r\n\r\n    /* const [btnText, setbtnText] = useState('Enable Dark mode')\r\n\r\n    const toggleStyle = () => {\r\n        if (myStyle.color === 'white') {\r\n            setmyStyle({\r\n                color: 'black',\r\n                backgroundColor: 'white',\r\n               \r\n            })\r\n            setbtnText('Enable Dark mode');\r\n        }\r\n        else {\r\n            setmyStyle({\r\n                color: 'white',\r\n                backgroundColor: 'black',\r\n                border: '1px solid #f2eaea'\r\n            })\r\n            setbtnText('Enable Light mode')\r\n        }\r\n     }*/\r\n    \r\n    return (\r\n        <div className=\"container my-2\" style={{ color: props.mode === 'dark' ? 'white':'black',backgroundColor:props.mode==='dark'? 'rgb(1 3 32)':'white'}}>\r\n            {/* <hr /> */}\r\n            <h1 className=\"my-2\">About Us</h1>\r\n            <div className=\"accordion accordion-flush\" id=\"accordionFlushExample\">\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"flush-headingOne\">\r\n                <button className=\"accordion-button collapsed\"style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#flush-collapseOne\" aria-expanded=\"false\" aria-controls=\"flush-collapseOne\">\r\n                <strong>Analyze Your text</strong> \r\n                </button>\r\n                </h2>\r\n                <div id=\"flush-collapseOne\" className=\"accordion-collapse collapse\" aria-labelledby=\"flush-headingOne\" data-bs-parent=\"#accordionFlushExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>TextUtils gives you a way to analyze your text quickly and efficently. Be it word count, character count or \r\n                        </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"flush-headingTwo\">\r\n                <button className=\"accordion-button collapsed\"style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#flush-collapseTwo\" aria-expanded=\"false\" aria-controls=\"flush-collapseTwo\">\r\n                 <strong>Free to use</strong>   \r\n                </button>\r\n                </h2>\r\n                <div id=\"flush-collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"flush-headingTwo\" data-bs-parent=\"#accordionFlushExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>TextUtils is a freee character counter tool that provides instant character count and word coutn statistics for a given text. TextUtils reports the number of words and characters. Thus it is suitable for writing text with word/character limit.\r\n    \r\n                        </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"flush-headingThree\">\r\n                <button className=\"accordion-button collapsed\"style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#flush-collapseThree\" aria-expanded=\"false\" aria-controls=\"flush-collapseThree\">\r\n                   <strong>Browser Compatible</strong> \r\n                </button>\r\n                </h2>\r\n                <div id=\"flush-collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"flush-headingThree\" data-bs-parent=\"#accordionFlushExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>This word counter software works in any web browsers such as Chrome, Firefox, Internet Explorer, Safari, Opera. It suits to count in facebook, blog, books, excel document, pdf document, essays, etc.\r\n\r\n                        </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n            {/* <div className=\" conatainer my-3\">\r\n                <button type=\"button\" onClick={toggleStyle} className=\"btn btn-primary \">{btnText}</button>\r\n            </div> */}\r\n        </div>\r\n    )\r\n}\r\n","// UnderStanding props and propsType:\r\n\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}id=\"nbar\">\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n        {/* <a className=\"navbar-brand\" href=\"#\">{props.title}</a> */}\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              {/* <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a> */}\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" to=\"/about\">{props.aboutText}</Link>\r\n            </li>          \r\n          </ul>\r\n          <form className=\"d-flex\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n            <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n            </form>           \r\n          </div>\r\n          \r\n          <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`} style={{ marginLeft:'12px'}} >\r\n              <input className=\"form-check-input\" onClick={()=>props.toggleMode('null')} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"style={{cursor:'pointer'}}/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\"style={{cursor:'pointer'}}>Enable Dark Mode</label>\r\n          </div>\r\n        </div>\r\n        </nav>\r\n        \r\n    )\r\n}\r\n\r\n// Giving the check statements to Navbar title and Navbar abouttext that it must be strings:\r\nNavbar.propTypes = {\r\n    title: PropTypes.string,\r\n    aboutText:PropTypes.string\r\n}\r\n\r\n\r\n// Set the Default PropsTypes is the navbar has not title and abouttext:\r\nNavbar.defaultProps = {\r\n    title: 'add a title',\r\n    aboutText:'About'\r\n}","//7) Understanding State and Handling Events in React: state means--> situation;\r\n//8) Adding more logics to TextUtils:\r\n\r\nimport React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState('');\r\n    // text=\"new text\"; --> wrong way to change the state\r\n    // setText=(\"new text\"); --> correct way to change the state\r\n\r\n    function handleUpClick() {\r\n        console.log('event fired for :', text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert('Converted to UpperCase', 'success');\r\n    };\r\n\r\n    const handleLowerClick=()=> {\r\n        // console.log('event fired for :',text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert('Converted to LowerCase', 'success');\r\n    };\r\n\r\n    const handleCopy = (e) => {\r\n        let text = document.getElementById('myBox');\r\n        text.select();\r\n        document.execCommand('copy');\r\n        // or, navigator.clipboard.writeText(text.value);\r\n        document.getSelection().removeAllRanges();  // inbuilt function to remove select ranges\r\n        props.showAlert('Copied to Clipboard!', 'success');\r\n        \r\n    }\r\n    const handleClear = () => {\r\n        setText('');\r\n    }\r\n    const handleExSpace = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(' '));\r\n    }\r\n\r\n    function handleChange(e) {\r\n        // console.log('on change');      \r\n        setText(e.target.value);\r\n    };\r\n    return (\r\n    <>\r\n        <div className=\"container\"style={{color:props.mode==='dark'?'white':'black'}} >\r\n            <h2 className=\"mb-3\">{props.heading}</h2>\r\n            <div  className=\"mb-3\">\r\n                <textarea className=\"form-control\" id=\"myBox\" placeholder=\"Enter text here\" style={{color:props.mode==='dark'?'white':'black',backgroundColor:props.mode==='dark'?'#151313':'white'}}value={text} onChange={handleChange} rows=\"8\"></textarea>\r\n            </div>\r\n            <button disabled={text.length===0} className=\"btn btn-primary my-1\" onClick={handleUpClick}>Convert Uppercase</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1\" onClick={handleLowerClick}>Convert Lowercase</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary\" onClick={handleCopy}>Copy Text</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1\" onClick={handleClear}>Clear Text</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary\" onClick={handleExSpace}>Remove Extra Space</button>\r\n        </div>\r\n        <div className=\"container my-3\"style={{color:props.mode==='dark'?'white':'black'}}>\r\n                <h2>Your text Summary</h2>\r\n                <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} Words and {text.length} Characters</p>\r\n                <p>{0.008*text.split(' ').filter((element)=>{return element.length!==0}).length} Minutes</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length>0?text:'Nothing to Preview!'}</p>\r\n        </div>\r\n    </>\r\n    )\r\n}\r\n\r\n ","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalized = (word) => {\r\n        let lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        //using 'props.alert &&' syntax to avoid the null value of alert.we can even use 'if condition' here.\r\n        <div style={{height:'50px'}}>\r\n            {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalized(props.alert.type)} : </strong>{props.alert.msg}    \r\n            </div>}\r\n        </div>\r\n    )\r\n    \r\n}\r\n","\nimport About from './Components/About';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './Components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nfunction App() {\n  const [Mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);  // to initialize alert message its default value is 'null'.\n  \n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500);\n  };\n\n  const removeBodyClass = () => {\n    document.body.classList.remove('bg-light');\n    document.body.classList.remove('bg-warning');\n    document.body.classList.remove('bg-success');\n    document.body.classList.remove('bg-danger');\n    document.body.classList.remove('bg-dark');\n    document.body.classList.remove('bg-primary');\n}\n  const toggleMode = (cls) => {\n    removeBodyClass();\n    // console.log(cls);\n    document.body.classList.add('bg-' + cls);\n     if (Mode === 'light') {\n      setMode('dark')\n      document.body.style.backgroundColor = '#020421';\n      // document.getElementById('myBox').style.backgroundColor = '#151313';\n       showAlert('Dark mode enabled', 'success');\n       // when the dark mode activated add the value this in title:\n       document.title = 'TextUtils-Dark mode';\n       // after clicking toggle mode and other mode show this as blinking in title section:\n      setInterval(() => {\n        document.title='Install TextUtils'\n      }, 2000);\n      setInterval(() => {\n        document.title='Hurry Up'\n      }, 1500);\n    }\n    else {\n      setMode('light')\n      document.body.style.backgroundColor = 'white';\n      // document.getElementById('myBox').style.backgroundColor = 'white';\n      showAlert('Light mode enabled', 'success');\n       document.title = 'TextUtils-Home';\n       setInterval(() => {\n        document.title='Install TextUtils'\n      }, 2000);\n    }\n    \n  }\n \n  return (\n    <>\n     {/* <Navbar title='textUtils' aboutText='About'/> */}\n      {/* <Navbar/> */}\n  <Router>\n      <Navbar title='textUtils' mode={Mode} toggleMode={toggleMode} />\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n        <Switch>\n          <Route exact path=\"/about\">\n             <About mode={Mode} />\n           </Route>\n          <Route exact path=\"/\">\n          <TextForm heading='Try TextUtils- Word counter, Remove extra spaces,Convert UpperCase & LowerCase' mode={Mode} showAlert={showAlert}/>\n          </Route>\n        </Switch>\n        </div>\n    </Router>\n    \n      \n    </>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}