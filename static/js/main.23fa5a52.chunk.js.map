{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","id","href","title","type","placeholder","onClick","toggleMode","style","height","width","cursor","role","htmlFor","TextForm","useState","text","setText","color","heading","backgroundColor","value","onChange","e","target","rows","console","log","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","execCommand","split","join","length","Alert","alert","word","lower","charAt","slice","capitalized","msg","defaultProps","aboutText","App","Mode","setMode","setAlert","message","setTimeout","cls","body","classList","remove","add","setInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.23fa5a52.chunk.js","sourcesContent":["// UnderStanding props and propsType:\r\n\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}id=\"nbar\">\r\n      <div className=\"container-fluid\">\r\n        {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n              {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link active\" to=\"/about\">{props.aboutText}</Link> */}\r\n            </li>          \r\n          </ul>\r\n          <form className=\"d-flex\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n            <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n            </form>           \r\n          </div>\r\n          <div className=\"d-flex\">\r\n            <div className=\"bg-primary rounded mx-2 \" onClick={()=>props.toggleMode('primary')} style={{height:'30px',width:'30px',cursor:'pointer'}}></div>\r\n            <div className=\"bg-warning rounded mx-2 \" onClick={()=>props.toggleMode('warning')} style={{height:'30px',width:'30px',cursor:'pointer'}}></div>\r\n            <div className=\"bg-success rounded mx-2 \" onClick={()=>props.toggleMode('success')} style={{height:'30px',width:'30px',cursor:'pointer'}}></div>\r\n            <div className=\"bg-danger rounded mx-2 \" onClick={()=>props.toggleMode('danger')} style={{height:'30px',width:'30px',cursor:'pointer'}}></div>\r\n        </div>\r\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`} >\r\n              <input className=\"form-check-input\" onClick={()=>props.toggleMode('null')} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"style={{cursor:'pointer'}}/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\"style={{cursor:'pointer'}}>Toggle Mode</label>\r\n          </div>\r\n        </div>\r\n        </nav>\r\n        \r\n    )\r\n}\r\n\r\n// Giving the check statements to Navbar title and Navbar abouttext that it must be strings:\r\nNavbar.propTypes = {\r\n    title: PropTypes.string,\r\n    aboutText:PropTypes.string\r\n}\r\n\r\n\r\n// Set the Default PropsTypes is the navbar has not title and abouttext:\r\nNavbar.defaultProps = {\r\n    title: 'add a title',\r\n    aboutText:'about'\r\n}","//7) Understanding State and Handling Events in React: state means--> situation;\r\n//8) Adding more logics to TextUtils:\r\n\r\nimport React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState('');\r\n    // text=\"new text\"; --> wrong way to change the state\r\n    // setText=(\"new text\"); --> correct way to change the state\r\n\r\n    function handleUpClick() {\r\n        console.log('event fired for :', text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert('Converted to UpperCase', 'success');\r\n    };\r\n\r\n    const handleLowerClick=()=> {\r\n        // console.log('event fired for :',text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert('Converted to LowerCase', 'success');\r\n    };\r\n\r\n    const handleCopy = (e) => {\r\n        let text = document.getElementById('myBox');\r\n        text.select();\r\n        document.execCommand('copy');\r\n         props.showAlert('Copied to Clipboard', 'success');\r\n        // or, navigator.clipboard.writeText(text.value);\r\n    }\r\n    const handleClear = () => {\r\n        setText('');\r\n    }\r\n    const handleExSpace = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(' '));\r\n    }\r\n\r\n    function handleChange(e) {\r\n        // console.log('on change');      \r\n        setText(e.target.value);\r\n    };\r\n    return (\r\n    <>\r\n        <div className=\"container\"style={{color:props.mode==='dark'?'white':'black'}} >\r\n            <h1>{props.heading}</h1>\r\n            <div  className=\"mb-3\">\r\n                <textarea className=\"form-control\" id=\"myBox\" placeholder=\"Enter text here\" style={{color:props.mode==='dark'?'white':'black',backgroundColor:props.mode==='dark'?'#151313':'white'}}value={text} onChange={handleChange} rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary\" onClick={handleUpClick}>Convert Uppercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleLowerClick}>Convert Lowercase</button>\r\n            <button className=\"btn btn-primary\" onClick={handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleClear}>Clear Text</button>\r\n            <button className=\"btn btn-primary\" onClick={handleExSpace}>Remove Extra Space</button>\r\n        </div>\r\n        <div className=\"container my-3\"style={{color:props.mode==='dark'?'white':'black'}}>\r\n                <h2>Your text Summary</h2>\r\n                <p>{text.split(' ').length} Words and {text.length} Characters</p>\r\n                <p>{0.008*text.split(' ').length} Minutes</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length>0?text:'Enter text above to Preview'}</p>\r\n        </div>\r\n    </>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalized = (word) => {\r\n        let lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        //using 'props.alert &&' syntax to avoid the null value of alert.we can even use if condition here.\r\n\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalized(props.alert.type)} : </strong>{props.alert.msg}    \r\n        </div>\r\n    )\r\n    \r\n}\r\n","\nimport './App.css';\n// import About from './Components/About';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './Components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [Mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);  // to initialize alert message its default value is 'null'.\n  \n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500);\n  };\n\n  const removeBodyClass = () => {\n    document.body.classList.remove('bg-light');\n    document.body.classList.remove('bg-warning');\n    document.body.classList.remove('bg-success');\n    document.body.classList.remove('bg-danger');\n    document.body.classList.remove('bg-dark');\n    document.body.classList.remove('bg-primary');\n}\n  const toggleMode = (cls) => {\n    removeBodyClass();\n    // console.log(cls);\n    document.body.classList.add('bg-' + cls);\n     if (Mode === 'light') {\n      setMode('dark')\n      document.body.style.backgroundColor = '#020421';\n      // document.getElementById('myBox').style.backgroundColor = '#151313';\n       showAlert('Dark mode enabled', 'success');\n       // when the dark mode activated add the value this in title:\n       document.title = 'TextUtils-Dark mode';\n       // after clicking toggle mode and other mode show this as blinking in title section:\n      setInterval(() => {\n        document.title='Install TextUtils'\n      }, 2000);\n      setInterval(() => {\n        document.title='Hurry Up'\n      }, 1500);\n    }\n    else {\n      setMode('light')\n      document.body.style.backgroundColor = 'white';\n      // document.getElementById('myBox').style.backgroundColor = 'white';\n      showAlert('Light mode enabled', 'success');\n       document.title = 'TextUtils-Home';\n       setInterval(() => {\n        document.title='Install TextUtils'\n      }, 2000);\n    }\n    \n  }\n \n  return (\n    <>\n     {/* <Navbar title='textUtils' aboutText='About'/> */}\n      {/* <Navbar/> */}\n  {/* <Router> */}\n      <Navbar title='textUtils' mode={Mode} toggleMode={toggleMode} />\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n        {/* <Switch>\n          <Route exact path=\"/about\">\n             <About />\n           </Route> */}\n          {/* <Route exact path=\"/\"> */}\n          <TextForm heading='Enter text for below for Analyse' mode={Mode} showAlert={showAlert}/>\n          {/* </Route>\n        </Switch> */}\n        </div>\n    {/* </Router> */}\n    \n      \n    </>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}